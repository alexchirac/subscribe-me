/*
 * Protocoale de comunicatii
 * Laborator 7 - TCP
 * Echo Server
 * server.c
 */

#include <arpa/inet.h>
#include <errno.h>
#include <netinet/in.h>
#include <poll.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <vector>
#include <cstring>

#include "common.h"
#include "helpers.h"

#define MAX_CONNECTIONS 32

/*
    TODO 1.1: Rescrieți funcția de mai jos astfel încât ea să facă primirea
    a exact len octeți din buffer.
*/
int recv_all(int sockfd, void *buffer, size_t len) {
  size_t bytes_received = 0;
  size_t bytes_remaining = len;
  char *buff = (char *)buffer;
  
  while(bytes_remaining) {
    // TODO: Make the magic happen
    int read_bytes = recv(sockfd, buff + bytes_received, len, 0);
    if (read_bytes <= 0)
      break;
    bytes_received += read_bytes;
    bytes_remaining -= read_bytes;
  }
  

  /*
    TODO: Returnam exact cati octeti am citit
  */
  return bytes_received;
}

/*
    TODO 1.2: Rescrieți funcția de mai jos astfel încât ea să facă trimiterea
    a exact len octeți din buffer.
*/
int send_all(int sockfd, void *buffer, size_t len) {
  size_t bytes_sent = 0;
  size_t bytes_remaining = len;
  char *buff = (char *)buffer;
  
  while(bytes_remaining) {
    // TODO: Make the magic happen
    int sent_bytes = send(sockfd, buff + bytes_sent, len, 0);
    if (sent_bytes <= 0)
      break;
    bytes_sent += sent_bytes;
    bytes_remaining -= sent_bytes;
  }
  
  /*
    TODO: Returnam exact cati octeti am trimis
  */
  return bytes_sent;
}

int recv_and_send_udp(int udp_fd, std::vector<struct pollfd> poll_fds) {
  char buffer[1600];
  char topic[51];
  char payload[1501];
  char type;
  struct chat_packet sent_packet;

  // printf("Am primit udp\n");

  // TODO: Make the magic happen
  struct sockaddr_in from;
  socklen_t len = sizeof(from);
    
  topic[50] = 0;
  int read_bytes = recvfrom(udp_fd, buffer, 1600, 0, (struct sockaddr*)&from, &len);

  size_t pay_size = read_bytes - 50;

  memcpy(topic, buffer, 50);
  memcpy(payload, buffer + 50, pay_size);
  payload[read_bytes - 50] = 0;

  sent_packet.len = strlen(payload) + strlen(topic) + 2;
  sprintf(sent_packet.message, "%s:%hu %s", inet_ntoa(from.sin_addr), ntohs(from.sin_port), topic);

  size_t header_len = strlen(sent_packet.message);

  memcpy(sent_packet.message + header_len + 1, payload, pay_size);
  *(sent_packet.message + header_len + pay_size + 1) = 0;

  // printf("%s\n", sent_packet.message);
  for (int i = 3; i < poll_fds.size(); i++) {
    send_all(poll_fds[i].fd, &sent_packet, sizeof(sent_packet));
  }

  return 1;
}

int check_id(std::vector<char *> ids, char new_id[]) {
  for (auto id : ids) {
    if (!strcmp(id, new_id)) {
      return -1;
    }
  }
  
  return 1;
}

void run_chat_multi_server(int listenfd, int udp_fd) {

  std::vector<struct pollfd> poll_fds(3);
  std::vector<char *> ids;
  int rc;
  char buf[BUFSIZ];

  struct chat_packet received_packet;

  // Setam socket-ul listenfd pentru ascultare
  rc = listen(listenfd, MAX_CONNECTIONS);
  DIE(rc < 0, "listen");

  // Adaugam noul file descriptor (socketul pe care se asculta conexiuni) in
  // multimea poll_fds
  poll_fds[0].fd = listenfd;
  poll_fds[0].events = POLLIN;

  poll_fds[1].fd = udp_fd;
  poll_fds[1].events = POLLIN;

  poll_fds[2].fd = STDIN_FILENO;
  poll_fds[2].events = POLLIN;

  while (1) {
    // Asteptam sa primim ceva pe unul dintre cei num_sockets socketi
    rc = poll(&poll_fds[0], poll_fds.size(), -1);
    DIE(rc < 0, "poll");

    for (int i = 0; i < poll_fds.size(); i++) {
      if (poll_fds[i].revents & POLLIN) {
        if (poll_fds[i].fd == STDIN_FILENO) {
          scanf("%s", buf);
          if (!strncmp(buf, "exit", 4)) {
            for (int j = 0; j < poll_fds.size(); j++) {
              close(poll_fds[j].fd);
            }
            return;
          }
        }
        if (poll_fds[i].fd == listenfd) {
          // Am primit o cerere de conexiune pe socketul de listen, pe care
          // o acceptam
          struct sockaddr_in cli_addr;
          socklen_t cli_len = sizeof(cli_addr);
          const int newsockfd =
              accept(listenfd, (struct sockaddr *)&cli_addr, &cli_len);
          DIE(newsockfd < 0, "accept");

          // Adaugam noul socket intors de accept() la multimea descriptorilor
          // de citire
          struct pollfd new_pollfd;
          new_pollfd.fd = newsockfd;
          new_pollfd.events = POLLIN;
          poll_fds.push_back(new_pollfd);

          int rc = recv_all(newsockfd, &received_packet,
                            sizeof(received_packet));
          DIE(rc < 0, "recv");

          char client_ID[11];
          char ip[20];
          int port;

          sscanf(received_packet.message, "%s %s %d", client_ID, ip, &port);

          int ret = check_id(ids, client_ID);

          if (ret < 0) {
            printf("Client %s already connected.\n", client_ID);

            close(poll_fds.back().fd);
            poll_fds.pop_back();
          } else {
            printf("New client %s connected from %s:%d.\n", client_ID, inet_ntoa(cli_addr.sin_addr), ntohs(cli_addr.sin_port));
            char *new_id = (char *)malloc(strlen(client_ID));
            strcpy(new_id, client_ID);
            ids.push_back(new_id);
          }

          continue;
        } 
        if (poll_fds[i].fd != listenfd && poll_fds[i].fd != udp_fd) {
          // Am primit date pe unul din socketii de client, asa ca le receptionam
          int rc = recv_all(poll_fds[i].fd, &received_packet,
                            sizeof(received_packet));
          DIE(rc < 0, "recv");

          if (rc == 0) {
            printf("Client %s disconnected.\n", ids[i - 3]);
            free(ids[i - 3]);
            close(poll_fds[i].fd);

            // Scoatem din multimea de citire socketul inchis
            poll_fds.erase(poll_fds.begin() + i);
            ids.erase(ids.begin() + i - 3);
          } else {
            // TODO: Logica de Subscribe si Unsubscribe
          }
          continue;
        }
        // printf("S-a primit udp\n");
        int rc = recv_and_send_udp(udp_fd, poll_fds);
        DIE(rc < 0, "recv");

      }
    }
  }
}

int main(int argc, char *argv[]) {
  if (argc != 2) {
    printf("\n Usage: %s <port>\n", argv[0]);
    return 1;
  }
  setvbuf(stdout, NULL, _IONBF, BUFSIZ);
  // Parsam port-ul ca un numar
  uint16_t port;
  int rc = sscanf(argv[1], "%hu", &port);
  DIE(rc != 1, "Given port is invalid");

  // Obtinem un socket TCP pentru receptionarea conexiunilor
  const int listenfd = socket(AF_INET, SOCK_STREAM, 0);
  DIE(listenfd < 0, "socket");

  const int udp_fd = socket(AF_INET, SOCK_DGRAM, 0);
  DIE(udp_fd < 0, "udp_socket");

  // Completăm in serv_addr adresa serverului, familia de adrese si portul
  // pentru conectare
  struct sockaddr_in serv_addr;
  socklen_t socket_len = sizeof(struct sockaddr_in);

  // Facem adresa socket-ului reutilizabila, ca sa nu primim eroare in caz ca
  // rulam de 2 ori rapid
  // Vezi https://stackoverflow.com/questions/3229860/what-is-the-meaning-of-so-reuseaddr-setsockopt-option-linux
  const int enable = 1;
  if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int)) < 0)
    perror("setsockopt(SO_REUSEADDR) failed");

  memset(&serv_addr, 0, socket_len);
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(port);
  rc = inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr.s_addr);
  DIE(rc <= 0, "inet_pton");

  // Asociem adresa serverului cu socketul creat folosind bind
  rc = bind(listenfd, (const struct sockaddr *)&serv_addr, sizeof(serv_addr));
  DIE(rc < 0, "bind");

  rc = bind(udp_fd, (const struct sockaddr *)&serv_addr, sizeof(serv_addr));
  DIE(rc < 0, "bind udp");

  run_chat_multi_server(listenfd, udp_fd);

  // Inchidem listenfd
  close(listenfd);

  return 0;
}
